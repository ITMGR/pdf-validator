{
    "docs": [
        {
            "location": "/", 
            "text": "PDF Validation Service Overview\n\n\nPDF Validation Service (hereinafter \u2013 the Service) is a SOAP-based\nservice which purpose is to validate signatures in digitally signed\nPDF-files according to laws of the Republic of Estonia (described below\nin the Validation Policy section).\n\n\nThe Service uses\n\n\n\n\nEU DSS (Digital Signature Service) library as Core Library\n\n\nCustomized Validation Policy constraints that will verify the signed\n  PDF-file's\u00a0conformity to laws of Republic of Estonia.\n\n\n\n\nEU DSS library was chosen as it has already been used in DigiDoc4J\nlibrary (where it was chosen for having the most complete functionality\ncompared to other Java libraries). For more information on EU DSS, see\nk\nhttps://joinup.ec.europa.eu/asset/sd-dss/description\n.\n\n\nThe Service will use the following functionalities of EU DSS library:\n\n\n\n\nValidation Functionality\n\n\n\n\nMain features of the Service:\n\n\n\n\nEU DSS SOAP API with some additional information (Signer\u2019s\n  certificate etc).\n\n\nThe Service handles files in PDF-format version 1.7 and later,\n  signed with PadES-profile signatures.\n\n\nMultiple Signatures are supported.\n\n\nThe Service uses European Commission\u2019s TSL (Trusted Service\n  Status List) for certificate chain validation.\n\n\nEuropean Commission\u2019s TSL contains references to TSLs of\n  European Union\u2019s member states and members of the European\n  Economic Area. This allows the PDF Validator to validate\n  signature that has been signed with certificates issued in any\n  of European Union\u2019s member states.\n\n\nDuring the Validation Process, a Certificate Chain is created\n  from Signer\u2019s Certificate up to the Trust Anchor (national Trust\n  List referenced by the central European Commission's Trust List)\n  for all certificates included in the signature (i.e. the\n  signer's certificate, OCSP Service's certificate, time-stamping\n  Service's certificate).\n\n\n\n\n\n\nSignatures with PadES-LT and PadES-LTA profile are supported.\n\n\nThe Signature must contain OCSP confirmation that meets the\n  Service\u2019s requirements.\n\n\nAt the time of creating the current documentation, it is expected that\n\n\n\n\nthe Service will be used by the following applications:\n\n\n\n\nDigiDoc3 Client application\n\n\nThird party document management applications", 
            "title": "PDF Validation Service Overview"
        }, 
        {
            "location": "/#pdf-validation-service-overview", 
            "text": "PDF Validation Service (hereinafter \u2013 the Service) is a SOAP-based\nservice which purpose is to validate signatures in digitally signed\nPDF-files according to laws of the Republic of Estonia (described below\nin the Validation Policy section).  The Service uses   EU DSS (Digital Signature Service) library as Core Library  Customized Validation Policy constraints that will verify the signed\n  PDF-file's\u00a0conformity to laws of Republic of Estonia.   EU DSS library was chosen as it has already been used in DigiDoc4J\nlibrary (where it was chosen for having the most complete functionality\ncompared to other Java libraries). For more information on EU DSS, see\nk https://joinup.ec.europa.eu/asset/sd-dss/description .  The Service will use the following functionalities of EU DSS library:   Validation Functionality   Main features of the Service:   EU DSS SOAP API with some additional information (Signer\u2019s\n  certificate etc).  The Service handles files in PDF-format version 1.7 and later,\n  signed with PadES-profile signatures.  Multiple Signatures are supported.  The Service uses European Commission\u2019s TSL (Trusted Service\n  Status List) for certificate chain validation.  European Commission\u2019s TSL contains references to TSLs of\n  European Union\u2019s member states and members of the European\n  Economic Area. This allows the PDF Validator to validate\n  signature that has been signed with certificates issued in any\n  of European Union\u2019s member states.  During the Validation Process, a Certificate Chain is created\n  from Signer\u2019s Certificate up to the Trust Anchor (national Trust\n  List referenced by the central European Commission's Trust List)\n  for all certificates included in the signature (i.e. the\n  signer's certificate, OCSP Service's certificate, time-stamping\n  Service's certificate).    Signatures with PadES-LT and PadES-LTA profile are supported.  The Signature must contain OCSP confirmation that meets the\n  Service\u2019s requirements.  At the time of creating the current documentation, it is expected that   the Service will be used by the following applications:   DigiDoc3 Client application  Third party document management applications", 
            "title": "PDF Validation Service Overview"
        }, 
        {
            "location": "/architecture/", 
            "text": "Architecture of the Core Service\n\n\nThe following picture represents the most important modules (JAR-files) in the single WAR-file of the Service. \nThe WAR file can be deployed to an application server like Tomcat.\n\n\n\n\n\n\nThe Service is built on top of the EU DSS library,\u00a0which already contains almost everything that the current project needs \n(including a web service for validating signatures). The scope of this project is to add additional requirements (e.g. additional \nvalidation constraints and monitoring) which are not supported by the existing DSS library. The above diagram shows the main JAR-files \ninside the WAR-file.\n\n\nThe modules in the above image are described in the following list:\n\n\n\n\npdf-validator-webapp\n - The main entry point to the system; it exposes the new PDF Validation Service \n  to the outside world. To a large extent, it will be delegating to requests the already existing DSS library code.\n\n\npdf-validator-webservice\n - Web service configuration module.\n\n\npdf-validator-test\n - End-to-end test cases for the service.\n\n\npdf-validator-monitoring\n - Monitoring support module.\n\n\npdf-validator-tsl-downloader\n - The TSL downloader module which makes it possible to use the \n  service with restricted internet access behind firewalls.\n\n\npdf-validator-keystore-generator\n - A utility that helps with configuring the trust anchor (LOTL signing certificates).\n\n\npdf-validator-distribution\n - A Maven module that generates distribution files that include various resources needed by the project.", 
            "title": "Architecture of the Core Service"
        }, 
        {
            "location": "/architecture/#architecture-of-the-core-service", 
            "text": "The following picture represents the most important modules (JAR-files) in the single WAR-file of the Service. \nThe WAR file can be deployed to an application server like Tomcat.    The Service is built on top of the EU DSS library,\u00a0which already contains almost everything that the current project needs \n(including a web service for validating signatures). The scope of this project is to add additional requirements (e.g. additional \nvalidation constraints and monitoring) which are not supported by the existing DSS library. The above diagram shows the main JAR-files \ninside the WAR-file.  The modules in the above image are described in the following list:   pdf-validator-webapp  - The main entry point to the system; it exposes the new PDF Validation Service \n  to the outside world. To a large extent, it will be delegating to requests the already existing DSS library code.  pdf-validator-webservice  - Web service configuration module.  pdf-validator-test  - End-to-end test cases for the service.  pdf-validator-monitoring  - Monitoring support module.  pdf-validator-tsl-downloader  - The TSL downloader module which makes it possible to use the \n  service with restricted internet access behind firewalls.  pdf-validator-keystore-generator  - A utility that helps with configuring the trust anchor (LOTL signing certificates).  pdf-validator-distribution  - A Maven module that generates distribution files that include various resources needed by the project.", 
            "title": "Architecture of the Core Service"
        }, 
        {
            "location": "/policy/", 
            "text": "Validation Policy\n\n\nThe validation of a Digital Signature in PDF is driven by a set of rules\ncalled\u00a0a Validation Policy - a set of constraints that are applied to\ncryptographic data during the execution of the Signature Validation\nProcess. For the most part, validation proceeds according to EU\nstandards and norms using the underlying DSS library. However, the\nService adds some additional constraints to comply with Estonian law and\nprocedures. The main differences from the rest of the Europe are\nfollowing:\n\n\n\n\nThe service requires a reasonable guarantee that the signing\n  certificates were not temporarily stopped during the time\n  of signing. Two different checks facilitate ensuring this\n  requirement:\n\n\nSignature level must be at \u201cLT\u201d or \u201cLTA\u201d. The signature must\n  already contain an OCSP response and a signature timestamp (the\n  service will not attempt to request new OCSP or timestamp tokens\n  during validation).\n\n\nThe provided OCSP response must be after the signature\n  timestamp, but not more than 24 hours later. A warning is given\n  if the time difference is more than 15 minutes but less than 24 hours.\n\n\n\n\n\n\nCertificate Revocation Lists (CRL) are not supported; OCSP protocol is mandated.\n\n\nThe cryptographic algorithms DSA and RIPEMD are not supported;\n  allowed key lengths of other algorithms have been changed in\n  accordance with Estonian requirements.\n\n\nSigning certificates must explicitly state that they were meant to\n  be used for digital signatures via the use of the non-repudiation flag.\n\n\n\n\nValidation Policy is described in more detail in \u201eAppendix 3 -\nValidation Policy\u201c. Validation Policy configuration is shown in\n\u201eAppendix 4 - Validation Constraint Configuration\u201c. Validation Process\u2019s\nresult example is shown Detailed Report section in \u201eAppendix 8 - Sample\nResponse Data Blocks - positive response\u201c.", 
            "title": "Validation Policy"
        }, 
        {
            "location": "/policy/#validation-policy", 
            "text": "The validation of a Digital Signature in PDF is driven by a set of rules\ncalled\u00a0a Validation Policy - a set of constraints that are applied to\ncryptographic data during the execution of the Signature Validation\nProcess. For the most part, validation proceeds according to EU\nstandards and norms using the underlying DSS library. However, the\nService adds some additional constraints to comply with Estonian law and\nprocedures. The main differences from the rest of the Europe are\nfollowing:   The service requires a reasonable guarantee that the signing\n  certificates were not temporarily stopped during the time\n  of signing. Two different checks facilitate ensuring this\n  requirement:  Signature level must be at \u201cLT\u201d or \u201cLTA\u201d. The signature must\n  already contain an OCSP response and a signature timestamp (the\n  service will not attempt to request new OCSP or timestamp tokens\n  during validation).  The provided OCSP response must be after the signature\n  timestamp, but not more than 24 hours later. A warning is given\n  if the time difference is more than 15 minutes but less than 24 hours.    Certificate Revocation Lists (CRL) are not supported; OCSP protocol is mandated.  The cryptographic algorithms DSA and RIPEMD are not supported;\n  allowed key lengths of other algorithms have been changed in\n  accordance with Estonian requirements.  Signing certificates must explicitly state that they were meant to\n  be used for digital signatures via the use of the non-repudiation flag.   Validation Policy is described in more detail in \u201eAppendix 3 -\nValidation Policy\u201c. Validation Policy configuration is shown in\n\u201eAppendix 4 - Validation Constraint Configuration\u201c. Validation Process\u2019s\nresult example is shown Detailed Report section in \u201eAppendix 8 - Sample\nResponse Data Blocks - positive response\u201c.", 
            "title": "Validation Policy"
        }, 
        {
            "location": "/interface_description/", 
            "text": "Interface description\n\n\nCurrently the Service provides only one service \u2013 PDF validation.\nWSDL \u2013 see \u201eAppendix 6 - ValidationService WSDL\u201c for details.\nTarget Namespace - http://dss.esig.europa.eu/validation/diagnostic.\nProtocol \u2013 SOAP over HTTP/HTTPS, style \u2013 document, encoding \u2013 literal wrapped.\n\n\nFunctionality\n\n\nSubmitting a Request\n\n\nThe calling system will call the service with the required parameters. The result will be synchronously \nreturned in the form of an XML. This Request is used to Validate the Signature in PDF against predetermined constraints.\n\n\nHandling Errors\n\n\nErrors occurring during the Validation Process are returned in the response data. Unexpected errors will be returned as SOAP faults.\n\n\nRequest\n\n\nRequest contains the actual PDF-file which Signature(s) need to be validated and additional information. For example of \nService Request, see \u201eAppendix 7 - Sample PDF Validation Service Request\u201c.\n\n\n\n\ndocument\n - Container for the signed document to be validated and additional information about the document   \n\n\nType\n: wsDocument   \n\n\nExample\n: \ndocument\n.... \n/document\n\n\nbytes\n - Contents of the signed PDF document\n\n\nType\n: base64Binary  \n\n\nExample\n: \nbytes\nJVBERi0xLjQKJcOkw7zDtsOfC....\n/bytes\n\n\nname\n - File Name of the document  \n\n\nType\n: string  \n\n\nExample\n: \nname\n/fixedpath/file.pdf\n/name\n  \n\n\nabsolutePath\n - Complete File Name of the document with Directory Path \n\n\nType\n: string  \n\n\nExample\n: \nabsolutePath\n/fixedpath/file.pdf \n/absolutePath\n\n\nmimeType\n - MIME-type of the document (PDF)    \n\n\nType\n: mimeType    \n\n\nExample\n: \nmimeType\nPDF\n/mimeType\n\n\nnextDocument\n - Determines if Diagnostic Data element is returned in Validation Service's Response. \n\n\nType\n: wsDocument\n\n\n\n\n\n\ndiagnosticDataToBeReturned\n - Determines if Diagnostic Data element is returned in Validation Service's Response.  \n\n\nType\n: boolean  \n\n\nExample\n: \ndiagnosticDataToBeReturned\ntrue\n/diagnosticDataToBeReturned\n\n\n\n\nResponse\n\n\nResponse object validateDocumentResponse is an XML containing the results of validating PDF Signature against constraints. The Service\u2019s Response must conform to ETSI TS 102\u00a0853 standard.\n\n\nThe Response consists of three data blocks:\n\n\n\n\n\n\nThe Simple Report\n -  is always returned in Response. Contains information about the validity of Signature according \n  to laws of the Republic of Estonia - validation time, status of validity, number of signatures and number of valid signatures \n  in document etc. See \u201e1Appendix 8 - \u201eThe Simple Report\u201c for details. The Simple Report contains the following information:\n\n\n\n\n\n\nSimpleReport\n\n\n\n\nPolicy\n - Container for information about the Validation policy that was used to validate the PDF-file\n\n\nPolicyName\n- Validation Policy name. Defined in constraint configuration file constraint.xml \n\ni             \nExample\n: \nPolicyName\n QES AdESQC TL based \n/PolicyName\n\n\nPolicyDescription\n - Description of Validation Policy  \n\n\nExample\n: \nPolicyDescription\n Validates  electronic signatures and indicates whether they are ......\n\n/PolicyDescription\n\n\n\n\n\n\nValidationTime\n - Indicates the time when PDF-file was validated.  \n\n\nExample\n: \nValidationTime\n2015-09-01T15:13:00Z \n/ValidationTime\n\n\nDocumentName\n - Indicates the PDF-file that was validated   \n\n\nExample\n:  \nDocumentName\n/fixedpath/file.pdf\n/DocumentName\n\n\n\n\nSignature Id=\u201c...\u201c SignatureFormat=\u201c...\u201c\n - For every Signature in PDF-file, indicates the Signature ID and format  \n\n\nExample\n: \nSignature Id=\"id-027bac117bcd86670c6eb8292925083b\" SignatureFormat= \"PAdES_BASELINE_LT\"\n \n\n\n\n\nSigningTime\n - Signing time of Signature   \n\n\nExample\n: \nSigningTime\n2015-07-09T07:00:48Z\n/SigningTime\n\n\nSignedBy\n - Signer\u2019s Common Name\n  \nExample\n: \nSignedBy\nSURNAME,GIVENNAME,37101010101\n/SignedBy\n\n\nIndication\n - Indicates the validity of Signature: VALID, INVALID, INDETERMINATE (see \u201e5.1.45.1.6 Validity of Document\u201c for details)  \n\n\nExample\n: \nIndication\nVALID\n/Indication\n\n\nInfo BestSignatureTime=\"DATE\" NameId=\"...\"\n  \n\n\nExample\n: \nInfo BestSignatureTime=\"2015-07-09T07:00:55Z\" NameId=\"EMPTY\" /\n\n\nSignatureLevel\n - Indicates Signature Level  \n\n\nExample\n: \nSignatureLevel\nQES \n/SignatureLevel\n    \n\n\nSignatureScopes\n\n\n\n\nSignatureScope name=\u201c...\u201c scope=\u201c...\u201c\n  \n\n\nExample\n:    \n\n\n \n    The document byte range: [0, 14153, 52047, 491] \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nValidSignaturesCount\n - Indicates total number of valid Signatures in PDF-file  \n\n\nExample\n: \nValidSignaturesCount\n1 \n/ValidSignaturesCount\n\n\n\n\nSignaturesCount\n - Indicates total number of Signatures in PDF-file \n\n\nExample\n: \nSignaturesCount\n1 \n/SignaturesCount\n\n\n\n\n\n\n\n\n\n\n\n\nThe Detailed Report\n \u2013 is always returned in Response. Contains detailed information about validity of document's signature(s) and results of Validation Process. The detailed Report has the following blocks:\n\n\n\n\nBasic Building Blocks:\n\n\nISC - Identification of Signer's Certificate;\n\n\nVCI - Validation Context Initialization;\n\n\nXCV - X.509 Certificate Validation;\n\n\nCV - Cryptographic Verification;\n\n\nSAV - Signature Acceptance Validation;        \n\n  Each block contains a number of Validation Policy rules that are executed sequentially. \n  The result of each rule is OK or NOT OK. The process is stopped when the first rule fails. \n  Each block contains a conclusion: \n\n\nIf all rules are met then the conclusion node indicates VALID.\n\n\nOtherwise INVALID or INDETERMINATE indication is returned depending on the ETSI standard definition.\n\n\n\n\n\n\n\n\n\n\nBasic Validation Data;\n\n\nTimestamp Validation Data;\n\n\nAdES-T Validation Data;\n\n\nLong Term Validation Data.\n\n\n\n\n\n\nThe Diagnostic Data\n \u2013 returned only if  \ndiagnosticDataToBeReturned\n in Service Request is set to true. This is a \n  data set constructed from the information contained in the signature itself, but also from information retrieved dynamically \n  as revocation data and information extrapolated as the mathematical validity of a signature. All this information is \n  independent of the applied validation policy. Two different validation policies applied to the same diagnostic data can \n  lead to different results. For detailed example of the Diagnostic Data, see \u201eAppendix 8 - Sample Response Data Blocks - positive \n  response\u201c, section \u201eThe Diagnostic Data\u201c.\n\n\n\n\nThe Diagnostic Data block contains one additional Response element as compared to EU DSS. Every \nCertificate\u2026\n\u2026\n/Certificate\n\n  container in \nUsedCertificates\n\u2026\n/UsedCertificates\n contains an element \nX509Data\n\u2026\n/X509Data\n for indicating the Certificate in base64 format.\n\n\nFor complete example of Service Response, see \u201eAppendix 8 - Sample Response Data Blocks - positive response\u201c.\n\n\nValidity of Document\n\n\niThe Simple Report in the Service\u2019s Response contains information about the validity of each Signature in PDF-file (according to passing of rules in Validation Policy):\n\n\n\n\nVALID\n - indicates that the signature has passed verification and it complies with the signature validation policy;\n\n\nINVALID\n -\u00a0indicates that either the signature format is incorrect or that the digital signature value fails verification;\n\n\nINDETERMINATE\n -\u00a0indicates that the format and digital signature verifications have not failed but there is insufficient information to determine if the electronic signature is valid.", 
            "title": "Interface description"
        }, 
        {
            "location": "/interface_description/#interface-description", 
            "text": "Currently the Service provides only one service \u2013 PDF validation.\nWSDL \u2013 see \u201eAppendix 6 - ValidationService WSDL\u201c for details.\nTarget Namespace - http://dss.esig.europa.eu/validation/diagnostic.\nProtocol \u2013 SOAP over HTTP/HTTPS, style \u2013 document, encoding \u2013 literal wrapped.", 
            "title": "Interface description"
        }, 
        {
            "location": "/interface_description/#functionality", 
            "text": "Submitting a Request  The calling system will call the service with the required parameters. The result will be synchronously \nreturned in the form of an XML. This Request is used to Validate the Signature in PDF against predetermined constraints.  Handling Errors  Errors occurring during the Validation Process are returned in the response data. Unexpected errors will be returned as SOAP faults.  Request  Request contains the actual PDF-file which Signature(s) need to be validated and additional information. For example of \nService Request, see \u201eAppendix 7 - Sample PDF Validation Service Request\u201c.   document  - Container for the signed document to be validated and additional information about the document     Type : wsDocument     Example :  document ....  /document  bytes  - Contents of the signed PDF document  Type : base64Binary    Example :  bytes JVBERi0xLjQKJcOkw7zDtsOfC.... /bytes  name  - File Name of the document    Type : string    Example :  name /fixedpath/file.pdf /name     absolutePath  - Complete File Name of the document with Directory Path   Type : string    Example :  absolutePath /fixedpath/file.pdf  /absolutePath  mimeType  - MIME-type of the document (PDF)      Type : mimeType      Example :  mimeType PDF /mimeType  nextDocument  - Determines if Diagnostic Data element is returned in Validation Service's Response.   Type : wsDocument    diagnosticDataToBeReturned  - Determines if Diagnostic Data element is returned in Validation Service's Response.    Type : boolean    Example :  diagnosticDataToBeReturned true /diagnosticDataToBeReturned   Response  Response object validateDocumentResponse is an XML containing the results of validating PDF Signature against constraints. The Service\u2019s Response must conform to ETSI TS 102\u00a0853 standard.  The Response consists of three data blocks:    The Simple Report  -  is always returned in Response. Contains information about the validity of Signature according \n  to laws of the Republic of Estonia - validation time, status of validity, number of signatures and number of valid signatures \n  in document etc. See \u201e1Appendix 8 - \u201eThe Simple Report\u201c for details. The Simple Report contains the following information:    SimpleReport   Policy  - Container for information about the Validation policy that was used to validate the PDF-file  PolicyName - Validation Policy name. Defined in constraint configuration file constraint.xml  \ni              Example :  PolicyName  QES AdESQC TL based  /PolicyName  PolicyDescription  - Description of Validation Policy    Example :  PolicyDescription  Validates  electronic signatures and indicates whether they are ...... /PolicyDescription    ValidationTime  - Indicates the time when PDF-file was validated.    Example :  ValidationTime 2015-09-01T15:13:00Z  /ValidationTime  DocumentName  - Indicates the PDF-file that was validated     Example :   DocumentName /fixedpath/file.pdf /DocumentName   Signature Id=\u201c...\u201c SignatureFormat=\u201c...\u201c  - For every Signature in PDF-file, indicates the Signature ID and format    Example :  Signature Id=\"id-027bac117bcd86670c6eb8292925083b\" SignatureFormat= \"PAdES_BASELINE_LT\"     SigningTime  - Signing time of Signature     Example :  SigningTime 2015-07-09T07:00:48Z /SigningTime  SignedBy  - Signer\u2019s Common Name\n   Example :  SignedBy SURNAME,GIVENNAME,37101010101 /SignedBy  Indication  - Indicates the validity of Signature: VALID, INVALID, INDETERMINATE (see \u201e5.1.45.1.6 Validity of Document\u201c for details)    Example :  Indication VALID /Indication  Info BestSignatureTime=\"DATE\" NameId=\"...\"     Example :  Info BestSignatureTime=\"2015-07-09T07:00:55Z\" NameId=\"EMPTY\" /  SignatureLevel  - Indicates Signature Level    Example :  SignatureLevel QES  /SignatureLevel       SignatureScopes   SignatureScope name=\u201c...\u201c scope=\u201c...\u201c     Example :       \n    The document byte range: [0, 14153, 52047, 491]         ValidSignaturesCount  - Indicates total number of valid Signatures in PDF-file    Example :  ValidSignaturesCount 1  /ValidSignaturesCount   SignaturesCount  - Indicates total number of Signatures in PDF-file   Example :  SignaturesCount 1  /SignaturesCount       The Detailed Report  \u2013 is always returned in Response. Contains detailed information about validity of document's signature(s) and results of Validation Process. The detailed Report has the following blocks:   Basic Building Blocks:  ISC - Identification of Signer's Certificate;  VCI - Validation Context Initialization;  XCV - X.509 Certificate Validation;  CV - Cryptographic Verification;  SAV - Signature Acceptance Validation;         \n  Each block contains a number of Validation Policy rules that are executed sequentially. \n  The result of each rule is OK or NOT OK. The process is stopped when the first rule fails. \n  Each block contains a conclusion:   If all rules are met then the conclusion node indicates VALID.  Otherwise INVALID or INDETERMINATE indication is returned depending on the ETSI standard definition.      Basic Validation Data;  Timestamp Validation Data;  AdES-T Validation Data;  Long Term Validation Data.    The Diagnostic Data  \u2013 returned only if   diagnosticDataToBeReturned  in Service Request is set to true. This is a \n  data set constructed from the information contained in the signature itself, but also from information retrieved dynamically \n  as revocation data and information extrapolated as the mathematical validity of a signature. All this information is \n  independent of the applied validation policy. Two different validation policies applied to the same diagnostic data can \n  lead to different results. For detailed example of the Diagnostic Data, see \u201eAppendix 8 - Sample Response Data Blocks - positive \n  response\u201c, section \u201eThe Diagnostic Data\u201c.   The Diagnostic Data block contains one additional Response element as compared to EU DSS. Every  Certificate\u2026 \u2026 /Certificate \n  container in  UsedCertificates \u2026 /UsedCertificates  contains an element  X509Data \u2026 /X509Data  for indicating the Certificate in base64 format.  For complete example of Service Response, see \u201eAppendix 8 - Sample Response Data Blocks - positive response\u201c.  Validity of Document  iThe Simple Report in the Service\u2019s Response contains information about the validity of each Signature in PDF-file (according to passing of rules in Validation Policy):   VALID  - indicates that the signature has passed verification and it complies with the signature validation policy;  INVALID  -\u00a0indicates that either the signature format is incorrect or that the digital signature value fails verification;  INDETERMINATE  -\u00a0indicates that the format and digital signature verifications have not failed but there is insufficient information to determine if the electronic signature is valid.", 
            "title": "Functionality"
        }, 
        {
            "location": "/deployment/", 
            "text": "Deploying PDF Validator Web Service\n\n\nSystem requirements:\n\n\n\n\nMinimum required Java version is \nJava 7u80\n but Java 8 is\n   recommended\n\n\nMaven 3\n to build project manually. (Any minor version update to\n   Mave 3 should work.)\n\n\nTomcat 7\n to run PDF validator web service. (Any minor version\n   update to Mave 3 should work.)\n\n\n\n\n\n\nNOTE\n: There are known PowerMock issues when building test JAR files\nwith Java 7. Therefore, it is required to use the latest Java 7 update.\nCurrently Java SDK version 1.7.0_80.\n\n\n\n\nBuilding project manually\n\n\nThe easiest way to get all required files is to just download the ZIP\nfile with all the required apps and services. But if You prefer to build\nthe project manually, then just issue following Maven command:\n\n\nmvn\u00a0install\u00a0\u2013DskipTests\n\n\n\n\n\n\nNOTE\n: The computer where maven install command is issued must be\nopen to the internet. Maven pulls dependencies from several different\nrepositories.\n\n\nNOTE:\n Joinup Maven repository (http://joinup.ec.europa.eu/site) is\nvery slow sometimes, so please be patient when building project the\nfirst time.\n\n\n\n\nInstalling the PDF Validator webapp\n\n\n\n\nNavigate the directory that holds the ZIP file (if you built the ZIP\n    file using Maven, navigate to\n    directory \nPROJECT_BASE_DIRECTORY/pdf-validator-distribution/target\n).\n\n\n\n\nCopy \npdf-validator-distribution-1.0.1.RC1-distribution.zip\n file\n    outside \nPROJECT_BASE_DIRECTORY\n. ZIP file contents will look like\n    the following:\n\n\npdf-validator-distribution-1.0.1.RC1-distribution\\\n\u2514\u2500\u2500 bin\n\u251c\u2500\u2500 pdf-validator-monitoring-1.0.1.RC1.jar # Monitoring web service (fat JAR)\\\n\u251c\u2500\u2500 pdf-validator-tsl-downloader-1.0.1.RC1.jar   # TSL File Downloader when (fat JAR)\\\n    \u2514\u2500\u2500 pdf-validator-webapp-1.0.1.RC1.war # PDF Validator webap\n\n\n\n\n\n\n\nUnzip the ZIP-file in directory for example into directory \n~/pdfvalidator/\n\n\n\n\n\n\nInstall Tomcat 7. For a quick manual install, one can use the\n    following commands:\n\n\ncurl --remote-name http://www.eu.apache.org/dist/tomcat/tomcat-7/v7.0.64/bin/apache-tomcat-7.0.64.zip\nunzip apache-tomcat-7.0.64.zip\n\n\n\nAfter that the directory should look like so:\n\n\npdfvalidator\n\u251c\u2500\u2500 apache-tomcat-7.0.64 - Tomcat 7 Application server\n\u2502 \u251c\u2500\u2500 bin\n\u2502 \u251c\u2500\u2500 conf\n\u2502 \u251c\u2500\u2500 lib\n\u2502 \u251c\u2500\u2500 LICENSE\n\u2502 \u251c\u2500\u2500 logs\n\u2502 \u251c\u2500\u2500 NOTICE\n\u2502 \u251c\u2500\u2500 RELEASE-NOTES\n\u2502 \u251c\u2500\u2500 RUNNING.txt\n\u2502 \u251c\u2500\u2500 temp\n\u2502 \u251c\u2500\u2500 webapps\n\u2502 \u2514\u2500\u2500 work\n\u2514\u2500\u2500 bin - Unzipped PDF Validator contents\n\u251c\u2500\u2500 pdf-validator-monitoring-1.0.1.RC1.jar\n\u251c\u2500\u2500 pdf-validator-tsl-downloader-1.0.1.RC1.jar\n\u2514\u2500\u2500 pdf-validator-webapp-1.0.1.RC1.war\n\n\n\n\n\n\n\nCreate context by issuing following commands relative to\n    \n~/pdfvalidator\n directory:\n\n\nmkdir -p apache-tomcat-7.0.64/conf/Catalina/localhost\\\ntouch apache-tomcat-7.0.64/conf/Catalina/localhost/pdf-validator-webapp.xml6.\n\n\n\n\n\n\n\nCopy below contents to \npdf-validator-webapp.xml\n\n\nxml version=\"1.0\" encoding=\"UTF-8\"\\\n       \n\nContext path=\"/pdf-validator-webapp\" docBase=\"/home/vagrant/pdfvalidator/bin/pdf-validator-webapp-1.0.1.RC1.war\" /\n\n\n\n\n\n\n\n\nStart the web service by issuing following command relative to\n\n~/pdfvalidator\n\n\n./apache-tomcat-7.0.64/bin/startup.sh start\n\n\n\n\n\n\n\nCheck that service is running by navigating to URL: \nhttp://localhost:8080/pdf-validator-webapp/wservice\n You should see\nlist of WSDL endpoints.\n\n\n\n\n\n\nValidation request maximum size limit\n\n\nPDF Validator by default can validate files around \n10MB\n in size. If there\nis need to validate larger files then web service needs to be recompiled. \n\n\nSteps to change upload limit:\n\n\n\n\nOpen file \nPROJECT_BASE_DIRECTORY/pdf-validator-parent/pdf-validator-webservice/src/main/resources/pdf-validator-webservice.xml\n\n\n\n\nChange this below shown section. File size limit is given in bytes.\\\n\n\n    \ncxf:bus\n\n        \ncxf:properties\n\n            \nentry key=\"org.apache.cxf.stax.maxTextLength\" value=\"10000000\" /\n \n        \n/cxf:properties\n\n    \n/cxf:bus\n\n\n\n\n\n\n\n\nSave file and recompile the project in the root using \n./build.sh\n script\n\n\n\n\n\n\nTo test file size limit You can submit large files with the following\ncommand (which submits \"demo.xml\", presumably a large file):\n\n\ncurl -s -X POST -d \n@demo.xml\n\nhttp://localhost:8080/pdf-validator-webapp/wservice/validationService\\\\?wsdl\n| xmllint --format - | pygmentize -l xml\n\n\n\n\n\n\nNOTE\n: xmllint and pygmentize maybe required to be installed\nseparately\n\n\n\n\nProduced output should look similar to this:\n\n\n?xml version=\n1.0\n ?\n\n\nsoap:Envelope xmlns:soap=\nhttp://schemas.xmlsoap.org/soap/envelope\n\n    \nsoap:Body\n\n        \nsoap:Fault\n\n            \nfaultcode\nsoap:Client\n/faultcode\n\n             \nfaultstring\nUnmarshalling Error: Text size limit (10000000) exceeded \n/faultstring\n\n         \n/soap:Fault\n\n    \n/soap:Body\n\n\n/soap:Envelope", 
            "title": "Deploying PDF Validator Web Service"
        }, 
        {
            "location": "/deployment/#deploying-pdf-validator-web-service", 
            "text": "System requirements:   Minimum required Java version is  Java 7u80  but Java 8 is\n   recommended  Maven 3  to build project manually. (Any minor version update to\n   Mave 3 should work.)  Tomcat 7  to run PDF validator web service. (Any minor version\n   update to Mave 3 should work.)    NOTE : There are known PowerMock issues when building test JAR files\nwith Java 7. Therefore, it is required to use the latest Java 7 update.\nCurrently Java SDK version 1.7.0_80.", 
            "title": "Deploying PDF Validator Web Service"
        }, 
        {
            "location": "/deployment/#building-project-manually", 
            "text": "The easiest way to get all required files is to just download the ZIP\nfile with all the required apps and services. But if You prefer to build\nthe project manually, then just issue following Maven command:  mvn\u00a0install\u00a0\u2013DskipTests   NOTE : The computer where maven install command is issued must be\nopen to the internet. Maven pulls dependencies from several different\nrepositories.  NOTE:  Joinup Maven repository (http://joinup.ec.europa.eu/site) is\nvery slow sometimes, so please be patient when building project the\nfirst time.", 
            "title": "Building project manually"
        }, 
        {
            "location": "/deployment/#installing-the-pdf-validator-webapp", 
            "text": "Navigate the directory that holds the ZIP file (if you built the ZIP\n    file using Maven, navigate to\n    directory  PROJECT_BASE_DIRECTORY/pdf-validator-distribution/target ).   Copy  pdf-validator-distribution-1.0.1.RC1-distribution.zip  file\n    outside  PROJECT_BASE_DIRECTORY . ZIP file contents will look like\n    the following:  pdf-validator-distribution-1.0.1.RC1-distribution\\\n\u2514\u2500\u2500 bin\n\u251c\u2500\u2500 pdf-validator-monitoring-1.0.1.RC1.jar # Monitoring web service (fat JAR)\\\n\u251c\u2500\u2500 pdf-validator-tsl-downloader-1.0.1.RC1.jar   # TSL File Downloader when (fat JAR)\\\n    \u2514\u2500\u2500 pdf-validator-webapp-1.0.1.RC1.war # PDF Validator webap    Unzip the ZIP-file in directory for example into directory  ~/pdfvalidator/    Install Tomcat 7. For a quick manual install, one can use the\n    following commands:  curl --remote-name http://www.eu.apache.org/dist/tomcat/tomcat-7/v7.0.64/bin/apache-tomcat-7.0.64.zip\nunzip apache-tomcat-7.0.64.zip  After that the directory should look like so:  pdfvalidator\n\u251c\u2500\u2500 apache-tomcat-7.0.64 - Tomcat 7 Application server\n\u2502 \u251c\u2500\u2500 bin\n\u2502 \u251c\u2500\u2500 conf\n\u2502 \u251c\u2500\u2500 lib\n\u2502 \u251c\u2500\u2500 LICENSE\n\u2502 \u251c\u2500\u2500 logs\n\u2502 \u251c\u2500\u2500 NOTICE\n\u2502 \u251c\u2500\u2500 RELEASE-NOTES\n\u2502 \u251c\u2500\u2500 RUNNING.txt\n\u2502 \u251c\u2500\u2500 temp\n\u2502 \u251c\u2500\u2500 webapps\n\u2502 \u2514\u2500\u2500 work\n\u2514\u2500\u2500 bin - Unzipped PDF Validator contents\n\u251c\u2500\u2500 pdf-validator-monitoring-1.0.1.RC1.jar\n\u251c\u2500\u2500 pdf-validator-tsl-downloader-1.0.1.RC1.jar\n\u2514\u2500\u2500 pdf-validator-webapp-1.0.1.RC1.war    Create context by issuing following commands relative to\n     ~/pdfvalidator  directory:  mkdir -p apache-tomcat-7.0.64/conf/Catalina/localhost\\\ntouch apache-tomcat-7.0.64/conf/Catalina/localhost/pdf-validator-webapp.xml6.    Copy below contents to  pdf-validator-webapp.xml  xml version=\"1.0\" encoding=\"UTF-8\"\\         Context path=\"/pdf-validator-webapp\" docBase=\"/home/vagrant/pdfvalidator/bin/pdf-validator-webapp-1.0.1.RC1.war\" /     Start the web service by issuing following command relative to ~/pdfvalidator  ./apache-tomcat-7.0.64/bin/startup.sh start    Check that service is running by navigating to URL:  http://localhost:8080/pdf-validator-webapp/wservice  You should see\nlist of WSDL endpoints.", 
            "title": "Installing the PDF Validator webapp"
        }, 
        {
            "location": "/deployment/#validation-request-maximum-size-limit", 
            "text": "PDF Validator by default can validate files around  10MB  in size. If there\nis need to validate larger files then web service needs to be recompiled.   Steps to change upload limit:   Open file  PROJECT_BASE_DIRECTORY/pdf-validator-parent/pdf-validator-webservice/src/main/resources/pdf-validator-webservice.xml   Change this below shown section. File size limit is given in bytes.\\       cxf:bus \n         cxf:properties \n             entry key=\"org.apache.cxf.stax.maxTextLength\" value=\"10000000\" /  \n         /cxf:properties \n     /cxf:bus     Save file and recompile the project in the root using  ./build.sh  script    To test file size limit You can submit large files with the following\ncommand (which submits \"demo.xml\", presumably a large file):  curl -s -X POST -d  @demo.xml \nhttp://localhost:8080/pdf-validator-webapp/wservice/validationService\\\\?wsdl\n| xmllint --format - | pygmentize -l xml   NOTE : xmllint and pygmentize maybe required to be installed\nseparately   Produced output should look similar to this:  ?xml version= 1.0  ?  soap:Envelope xmlns:soap= http://schemas.xmlsoap.org/soap/envelope \n     soap:Body \n         soap:Fault \n             faultcode soap:Client /faultcode \n              faultstring Unmarshalling Error: Text size limit (10000000) exceeded  /faultstring \n          /soap:Fault \n     /soap:Body  /soap:Envelope", 
            "title": "Validation request maximum size limit"
        }, 
        {
            "location": "/tsl_downloader/", 
            "text": "TSL file loading without internet\n\n\nThe Service by default tries to refresh TSL files in cache once every\nday, at 3:00 AM. In some cases when PDF Validator is behind the firewall\nand part of the Internet is not accessible to PDF Validation Service\nthen there is a way to manually update TSL files cache directory.\n\n\nSteps to manually update TSL files temp directory:\n\n\n\n\n\n\nFirst, if you haven\u2019t done so already, turn off downloading TSLs\n    from the internet (only needs to be done once):\n\n\n\n\nMake sure PDF Validator Service is not running\n\n\nCreate or copy \napplication-override.properties\n to\n    \n$CATALINA\\_HOME/conf\n directory with following contents:  \ntrustedListSource.tslRefreshPolicy=NEVER\n\n\n\n\nThis property only reloads cache contents and it never checks for\nupdated TSL file list.\n\n\n\n\n\n\nStart the PDF Validation Service.\n\n\n\n\n\n\nUsing TSL downloader Java application\n\n\n\n\nDownload the fresh TSLs from the internet and copy them to the\n    temp-folder of the server.\n\n\nRun PDF Validator TSL Downloader in machine that is open to\n       Internet:\njava -jar pdf-validator-tsl-downloader-4.5.RC1.jar\\\n\n\n\n\n\n\n\n\n\n\n\n\n\nAfter completing it creates \ntmp\n directory in same directory where the\nJAR file is.\n\n\n\n\n\n\nCopy tmp directory contents to PDF validator tmp directory. Default\n    location when using Tomcat is \n$CATALINA\\_HOME/temp\n.\n    This copying operation should be done during a time when the server\n    is not loading from that folder (for example, at 2:30 AM). It is\n    recommended to do it as an atomic operation (i.e., a filesystem\n    \u201cmove\u201d operation).\n\n\n\n\nChanging the location for TSL files and certificates\n\n\nBy default, validator service will look for downloaded certificates from\ndefault temp directory. In case of Tomcat, it is \n$CATALINA\\_HOME/temp\n,\nbut in some cases you may want to change it.\n\n\nFollow these steps:\n\n\n\n\nOpen or create \napplication-override.properties\n under\n   \n$CATALINA\\_HOME/conf\n directory\n\n\nAdd property: \nfileCacheDataLoader.fileCacheDirectory=/path/to/certificate/directory\n\n\nSave file and restart PDF validator web service", 
            "title": "TSL file loading without internet"
        }, 
        {
            "location": "/tsl_downloader/#tsl-file-loading-without-internet", 
            "text": "The Service by default tries to refresh TSL files in cache once every\nday, at 3:00 AM. In some cases when PDF Validator is behind the firewall\nand part of the Internet is not accessible to PDF Validation Service\nthen there is a way to manually update TSL files cache directory.  Steps to manually update TSL files temp directory:    First, if you haven\u2019t done so already, turn off downloading TSLs\n    from the internet (only needs to be done once):   Make sure PDF Validator Service is not running  Create or copy  application-override.properties  to\n     $CATALINA\\_HOME/conf  directory with following contents:   trustedListSource.tslRefreshPolicy=NEVER   This property only reloads cache contents and it never checks for\nupdated TSL file list.    Start the PDF Validation Service.", 
            "title": "TSL file loading without internet"
        }, 
        {
            "location": "/tsl_downloader/#using-tsl-downloader-java-application", 
            "text": "Download the fresh TSLs from the internet and copy them to the\n    temp-folder of the server.  Run PDF Validator TSL Downloader in machine that is open to\n       Internet: java -jar pdf-validator-tsl-downloader-4.5.RC1.jar\\       After completing it creates  tmp  directory in same directory where the\nJAR file is.    Copy tmp directory contents to PDF validator tmp directory. Default\n    location when using Tomcat is  $CATALINA\\_HOME/temp .\n    This copying operation should be done during a time when the server\n    is not loading from that folder (for example, at 2:30 AM). It is\n    recommended to do it as an atomic operation (i.e., a filesystem\n    \u201cmove\u201d operation).", 
            "title": "Using TSL downloader Java application"
        }, 
        {
            "location": "/tsl_downloader/#changing-the-location-for-tsl-files-and-certificates", 
            "text": "By default, validator service will look for downloaded certificates from\ndefault temp directory. In case of Tomcat, it is  $CATALINA\\_HOME/temp ,\nbut in some cases you may want to change it.  Follow these steps:   Open or create  application-override.properties  under\n    $CATALINA\\_HOME/conf  directory  Add property:  fileCacheDataLoader.fileCacheDirectory=/path/to/certificate/directory  Save file and restart PDF validator web service", 
            "title": "Changing the location for TSL files and certificates"
        }, 
        {
            "location": "/lotl_keystore/", 
            "text": "Generating keystore for LOTL validation (optional)\n\n\nPDF validator contains a Java keystore that holds certificates for TSL\nvalidation (more precisely, certificates for validating the signature of\nthe LOTL, or List of the Lists). The file name is \nkeystore.jks\n\n(usually contained in the \netc\n folder under Tomcat).\u00a0As of this writing\nthe keystore contains 3 certificates. In other words, these 3\ncertificates will be used by default\u00a0for validating the LOTL signatures.\nIf necessary, one can configure these accepted certificates.\n\n\nWhen PDF validator is deployed to Tomcat and started, it tries to load\nthe certificates contained in \netc/keystore.jks\n (the path is relative\nto the path of the directory where Tomcat was started from).\u00a0When\u00a0the\nfile does not exist, the application tries to copy the \nkeystore.jks\n\nthat it has under its classpath (usually inside its installation\nWAR-file) to \netc/keystore.jks\n, and then load it.\n\n\nTo override the default keystore, following steps should be taken:\n\n\n\n\nMake sure PDF Validator service is not running\n\n\n\n\nMake sure that the certificates that will be added to keystore are\n    present in the \nkeystore_certificates\n directory, which is relative\n    to the executable jar:\n\n\nls keystore_certificates\nec.europa.eu.2.crt ec.europa.eu.3.crt ec.europa.eu.crt\n\n\n\n\n\n\n\nRun PDF Validator Keystore Generator to generate keystore:\n\n\njava -jar pdf-validator-keystore-generator-4.5.RC1.jar\\\n\n\n\nkeystore.jks will be created inside the etc/ folder, which is\nrelative to the given executable jar.\n\n\n\n\n\n\nCopy the newly create \netc\n directory to Tomcat's \nbin\n directory.\n\n\n\n\nStart PDF validator:\n./bin/startup.sh", 
            "title": "Generating keystore for LOTL validation (optional)"
        }, 
        {
            "location": "/lotl_keystore/#generating-keystore-for-lotl-validation-optional", 
            "text": "PDF validator contains a Java keystore that holds certificates for TSL\nvalidation (more precisely, certificates for validating the signature of\nthe LOTL, or List of the Lists). The file name is  keystore.jks \n(usually contained in the  etc  folder under Tomcat).\u00a0As of this writing\nthe keystore contains 3 certificates. In other words, these 3\ncertificates will be used by default\u00a0for validating the LOTL signatures.\nIf necessary, one can configure these accepted certificates.  When PDF validator is deployed to Tomcat and started, it tries to load\nthe certificates contained in  etc/keystore.jks  (the path is relative\nto the path of the directory where Tomcat was started from).\u00a0When\u00a0the\nfile does not exist, the application tries to copy the  keystore.jks \nthat it has under its classpath (usually inside its installation\nWAR-file) to  etc/keystore.jks , and then load it.  To override the default keystore, following steps should be taken:   Make sure PDF Validator service is not running   Make sure that the certificates that will be added to keystore are\n    present in the  keystore_certificates  directory, which is relative\n    to the executable jar:  ls keystore_certificates\nec.europa.eu.2.crt ec.europa.eu.3.crt ec.europa.eu.crt    Run PDF Validator Keystore Generator to generate keystore:  java -jar pdf-validator-keystore-generator-4.5.RC1.jar\\  keystore.jks will be created inside the etc/ folder, which is\nrelative to the given executable jar.    Copy the newly create  etc  directory to Tomcat's  bin  directory.   Start PDF validator: ./bin/startup.sh", 
            "title": "Generating keystore for LOTL validation (optional)"
        }, 
        {
            "location": "/logging/", 
            "text": "Logging\n\n\nLogging functionality is handled by the \nSLF4J\n logging facade and on top\nof it the \nLogback\n framework is used.\u00a0As a result, logging can be\nconfigured via the standard Logback configuration file.\u00a0By default,\nlogging works on the \nINFO\n level and logs are directed to the system\nconsole as well as a log file.\n\n\nThe logback xml configuration file can be found at:\n\n\npdfValidator/pdf-validator-webapp/src/main/resources/logback.xml\n\n\n\n\nand when compiled the file will reside at\u00a0\n\n\nWEB-INF/classes/logback.xml\n\n\n\n\nwithin the packaged war. There is also a possibility to set the location\nof the default configuration file with a system\nproperty\u00a0\nlogback.configurationFile\n as a JVM argument.\u00a0The value of\nthis property can be a URL, a resource on the class path or a path to a\nfile external to the application.\n\n\njava -Dlogback.configurationFile=/path/to/config.xml\n\n\n\n\nIn this configuration file there are three appenders: \nSTDOUT\n (logs to\nstandard output), \nFILE\n (logs to a file) and \nSYSLOG\n (logs to syslog\nserver over the network). To disable certain appender from logging,\ncommenting out its \nappender-ref\n is sufficient, but it is \nrecommended\n\nthat the appender itself should also be commented out. For example to\ndisable \nSYSLOG\n appender (which is the default configuration), then one\ncan use following configuration:\n\n\n!--\n\nappender name=\nSYSLOG\n class=\nch.qos.logback.classic.net.SyslogAppender\n\n    \nsyslogHost\nenter\\_ip\\_or\\_hostname\\_here\n/syslogHost\n\n    \nport\n514\n/port\n\n    \nfacility\nUSER\n/facility\n\n    \nfilter class=\nch.qos.logback.classic.filter.ThresholdFilter\n\n        \nlevel\nINFO\n/level\n\n    \n/filter\n\n    \nsuffixPattern\n%-5level %logger{0}:%L \\[%thread\\] - %msg\n/suffixPattern\n\n\n/appender\n\n--\n\n\n\nroot level=\nDEBUG\n\n\nappender-ref ref=\nSTDOUT\n/\n\n\nappender-ref ref=\nFILE\n/\n\n\n!--\nappender-ref ref=\nSYSLOG\n/\n--\n\n\n\n/root\n\n\n\n\n\nLogback configuration manual:\u00a0\nhttp://logback.qos.ch/manual/\n\n\nSTDOUT appender\n\n\n\n\nDefault the log level is set to DEBUG\n\n\nAppender output pattern is:\u00a0\n%d{HH:mm:ss.SSS} %-5level %logger{0}:%L [%thread] - %msg%n\n\n\n\n\nFILE appender\n\n\n\n\nDefault log level is set to \nINFO\n\n\nuses\u00a0RollingFileAppender configured with\u00a0\nTimeBasedRollingPolicy\n.\n  Current configuration makes a seperate logfile for each day and each\n  file is kept for \n30 days\n. \n\n\n\n\nPS!\n keep in mind when using relative\n  destination file path, then the path is added at the end of the\n  currently working directory, i.e. where the application was started.\n  (Current day's logfile path:\u00a0\nlogs/pdf-validator-webapp.log\n,\n  prievious days pattern:\u00a0\n\n\n    logs/pdf-validator-webapp.%d{yyyy-MM-dd}.log)\n\n\n\n\n\nAppender output pattern is:\u00a0 \n%d{HH:mm:ss.SSS} %-5level %logger{0}:%L \\[%thread\\] - %msg%n\n-Dlogback.configurationFile=config.xml\n\n\n\n\n\n\n\nSYSLOG appender\n\n\n\n\nDefault log level is set to \nINFO\n\n\nTarget's ip/hostname and port are\u00a0configurable\n\n\nSyslog messsages' severity is\u00a0configurable\n\n\nSyslog messages' payload's timestamp and hostname part are created\n  implicitly and the suffixpattern is:\u00a0 \n%-5level %logger{0}:%L \\[%thread\\] - %msg", 
            "title": "Logging"
        }, 
        {
            "location": "/logging/#logging", 
            "text": "Logging functionality is handled by the  SLF4J  logging facade and on top\nof it the  Logback  framework is used.\u00a0As a result, logging can be\nconfigured via the standard Logback configuration file.\u00a0By default,\nlogging works on the  INFO  level and logs are directed to the system\nconsole as well as a log file.  The logback xml configuration file can be found at:  pdfValidator/pdf-validator-webapp/src/main/resources/logback.xml  and when compiled the file will reside at\u00a0  WEB-INF/classes/logback.xml  within the packaged war. There is also a possibility to set the location\nof the default configuration file with a system\nproperty\u00a0 logback.configurationFile  as a JVM argument.\u00a0The value of\nthis property can be a URL, a resource on the class path or a path to a\nfile external to the application.  java -Dlogback.configurationFile=/path/to/config.xml  In this configuration file there are three appenders:  STDOUT  (logs to\nstandard output),  FILE  (logs to a file) and  SYSLOG  (logs to syslog\nserver over the network). To disable certain appender from logging,\ncommenting out its  appender-ref  is sufficient, but it is  recommended \nthat the appender itself should also be commented out. For example to\ndisable  SYSLOG  appender (which is the default configuration), then one\ncan use following configuration:  !-- appender name= SYSLOG  class= ch.qos.logback.classic.net.SyslogAppender \n     syslogHost enter\\_ip\\_or\\_hostname\\_here /syslogHost \n     port 514 /port \n     facility USER /facility \n     filter class= ch.qos.logback.classic.filter.ThresholdFilter \n         level INFO /level \n     /filter \n     suffixPattern %-5level %logger{0}:%L \\[%thread\\] - %msg /suffixPattern  /appender \n--  root level= DEBUG  appender-ref ref= STDOUT /  appender-ref ref= FILE /  !-- appender-ref ref= SYSLOG / --  /root   Logback configuration manual:\u00a0 http://logback.qos.ch/manual/", 
            "title": "Logging"
        }, 
        {
            "location": "/logging/#stdout-appender", 
            "text": "Default the log level is set to DEBUG  Appender output pattern is:\u00a0 %d{HH:mm:ss.SSS} %-5level %logger{0}:%L [%thread] - %msg%n", 
            "title": "STDOUT appender"
        }, 
        {
            "location": "/logging/#file-appender", 
            "text": "Default log level is set to  INFO  uses\u00a0RollingFileAppender configured with\u00a0 TimeBasedRollingPolicy .\n  Current configuration makes a seperate logfile for each day and each\n  file is kept for  30 days .    PS!  keep in mind when using relative\n  destination file path, then the path is added at the end of the\n  currently working directory, i.e. where the application was started.\n  (Current day's logfile path:\u00a0 logs/pdf-validator-webapp.log ,\n  prievious days pattern:\u00a0      logs/pdf-validator-webapp.%d{yyyy-MM-dd}.log)   Appender output pattern is:\u00a0  %d{HH:mm:ss.SSS} %-5level %logger{0}:%L \\[%thread\\] - %msg%n -Dlogback.configurationFile=config.xml", 
            "title": "FILE appender"
        }, 
        {
            "location": "/logging/#syslog-appender", 
            "text": "Default log level is set to  INFO  Target's ip/hostname and port are\u00a0configurable  Syslog messsages' severity is\u00a0configurable  Syslog messages' payload's timestamp and hostname part are created\n  implicitly and the suffixpattern is:\u00a0  %-5level %logger{0}:%L \\[%thread\\] - %msg", 
            "title": "SYSLOG appender"
        }, 
        {
            "location": "/monitoring/", 
            "text": "Starting and configuring monitoring Service\n\n\nPDF Validator monitoring is a simple web service that allows one to\ncheck if the validation service is running correctly. This monitoring\nservice tries to periodically validate a simple PDF document using the\nvalidator, and exposes the validation results via a JSON API. This JSON\nAPI also includes information about TSL loading error messages that\noccurred on the validation server (if any) and shows when the TSLs\n(and/or their signing certificates) are about to expire. The simplest\nway to run this service is to issue a command shown below.\n\n\nRun PDF validator monitoring Service\n\n\njava -jar\u00a0pdf-validator-monitoring-4.5.RC1.jar\n\n\n\n\nDefault parameters for monitoring application are:\n\n\nserver.port=9000\nmonitoring.host=http://localhost:8080\nmonitoring.path=/pdf-validator-webapp/wService/validationService\n\n\n\n\nDefault monitoring interval is 5 min\n\n\nmonitoring.requestInterval=300000\n\n\n\n\nYou can override these properties by placing application.properties file\nin same directory where the\u00a0\npdf-validator-monitoring-4.5.RC1.jar\n is\nlocated.\n\n\nMonitoring Service response values\n\n\nTo see the last monitoring request result You can navigate to URL with\nbrowser where the Service is running\ni.e\u00a0\nhttp://localhost:9000/\n\u00a0default port for the Service is \n9000\n.\n\n\nOtherwise if You can not use browser then issue following command with\ncurl:\n\n\ncurl -s http://localhost:9000 | python -m json.tool\n\n\n\n\nSample response of PDF Validator Monitoring Service\n\n\n{\n    \nlastChecked\n: \n2015-09-30 11:33:49 AM GMT\n,\n    \nserviceStatus\n: \nOK\n,\n    \nstatusMessage\n: \nPDF validator service running correctly\n,\n    \ntslStatusResponse\n: {\n        \nserviceStatus\n: \nWARNING\n,\n        \nupdateStartTime\n: \n2015-09-30 09:59:07 AM GMT\n,\n        \nupdateEndTime\n: \n2015-09-30 09:59:33 AM GMT\n,\n        \nupdateMessage\n: \nExpiration WARNING(s) for: TSL has expired for http://example.com/tsl.xml at: 2015-07-31 10:00:00 AM EEST.\n,\n        \ntslCertificateInfo\n: {\n            \nhttps://ec.europa.eu/information_society/policy/esignature/trusted-list/tl-mp.xml\n: {\n                \nloadingDiagnosticInfo\n: \nLoaded Wed Sep 30 12:59:08 EEST 2015\n,\n                \nsignerCertificateValidUntil\n: \n2018-12-19 08:42:39 AM GMT\n,\n                \ntslValidUntil\n: \n2016-01-14 11:00:00 AM GMT\n\n            },\n            ...\n        },\n    }\n}\n\n\n\n\nPossible ServiceStatus values are:\u00a0\nOK\n, \nWARNING\n, \nCRITICAL\n\n\nMeaning of each of these statuses are:\n\n\n\n\nOK\n - Validation of sample PDF file went without problems.\n  Service is running correctly\n\n\nWARNING\n - There was issue validating PDF file but Service\n  is running. Example when WARNING is thrown when loading TSL files\n  into cache\n\n\nCRITICAL\n - Service is not running and is not responding to requests\n\n\n\n\nTSL update status report\n\n\nService status also provides information about current state of loaded\nlist of TSL certificates. Following information is provided.\n\n\n\n\nServiceStatus\u00a0\n- possible values are OK, WARNING, CRITICAL see\n   explanations below\n\n\nupdateStartTime\u00a0\n- date and time when the TSL update started or\n  \nNULL\n if not started\n\n\nupdateEndTime\u00a0\n- date and time when TSL update finished\n  successfully otherwise \nNULL\n if not yet finished or failed with error\n\n\nupdateMessage\u00a0\n- More detailed explanation why Service status is\n  i.e WARNING\n\n\ntslCertificateInfo\n - collection of all the countries TSLs that\n  have been loaded into PDF Validator\n\n\nloadingDiagnosticInfo\n - Additonal information when loading or\n  validating the TSL failed or loading time if no error was not\n  encountered\n\n\nsignerCertificateValidUntil\n - TSL signing certificate expiration\n  date\n\n\ntslValidUntil\n - TSL expiration date\n\n\n\n\nExplanation\u00a0of TSL update Service status values:\n\n\n\n\nOK\n\u00a0- TSL certificate list has successfully completed update all\n  is working correctly\n\n\nWARNING\n\u00a0- TSL update has not yet started or is currently in\n  progress\n\n\nCRITICAL\n\u00a0- TSL update status information could not be queried\n  from PDF Validator Service", 
            "title": "Monitoring Service"
        }, 
        {
            "location": "/monitoring/#starting-and-configuring-monitoring-service", 
            "text": "PDF Validator monitoring is a simple web service that allows one to\ncheck if the validation service is running correctly. This monitoring\nservice tries to periodically validate a simple PDF document using the\nvalidator, and exposes the validation results via a JSON API. This JSON\nAPI also includes information about TSL loading error messages that\noccurred on the validation server (if any) and shows when the TSLs\n(and/or their signing certificates) are about to expire. The simplest\nway to run this service is to issue a command shown below.  Run PDF validator monitoring Service  java -jar\u00a0pdf-validator-monitoring-4.5.RC1.jar  Default parameters for monitoring application are:  server.port=9000\nmonitoring.host=http://localhost:8080\nmonitoring.path=/pdf-validator-webapp/wService/validationService  Default monitoring interval is 5 min  monitoring.requestInterval=300000  You can override these properties by placing application.properties file\nin same directory where the\u00a0 pdf-validator-monitoring-4.5.RC1.jar  is\nlocated.", 
            "title": "Starting and configuring monitoring Service"
        }, 
        {
            "location": "/monitoring/#monitoring-service-response-values", 
            "text": "To see the last monitoring request result You can navigate to URL with\nbrowser where the Service is running\ni.e\u00a0 http://localhost:9000/ \u00a0default port for the Service is  9000 .  Otherwise if You can not use browser then issue following command with\ncurl:  curl -s http://localhost:9000 | python -m json.tool  Sample response of PDF Validator Monitoring Service  {\n     lastChecked :  2015-09-30 11:33:49 AM GMT ,\n     serviceStatus :  OK ,\n     statusMessage :  PDF validator service running correctly ,\n     tslStatusResponse : {\n         serviceStatus :  WARNING ,\n         updateStartTime :  2015-09-30 09:59:07 AM GMT ,\n         updateEndTime :  2015-09-30 09:59:33 AM GMT ,\n         updateMessage :  Expiration WARNING(s) for: TSL has expired for http://example.com/tsl.xml at: 2015-07-31 10:00:00 AM EEST. ,\n         tslCertificateInfo : {\n             https://ec.europa.eu/information_society/policy/esignature/trusted-list/tl-mp.xml : {\n                 loadingDiagnosticInfo :  Loaded Wed Sep 30 12:59:08 EEST 2015 ,\n                 signerCertificateValidUntil :  2018-12-19 08:42:39 AM GMT ,\n                 tslValidUntil :  2016-01-14 11:00:00 AM GMT \n            },\n            ...\n        },\n    }\n}  Possible ServiceStatus values are:\u00a0 OK ,  WARNING ,  CRITICAL  Meaning of each of these statuses are:   OK  - Validation of sample PDF file went without problems.\n  Service is running correctly  WARNING  - There was issue validating PDF file but Service\n  is running. Example when WARNING is thrown when loading TSL files\n  into cache  CRITICAL  - Service is not running and is not responding to requests", 
            "title": "Monitoring Service response values"
        }, 
        {
            "location": "/monitoring/#tsl-update-status-report", 
            "text": "Service status also provides information about current state of loaded\nlist of TSL certificates. Following information is provided.   ServiceStatus\u00a0 - possible values are OK, WARNING, CRITICAL see\n   explanations below  updateStartTime\u00a0 - date and time when the TSL update started or\n   NULL  if not started  updateEndTime\u00a0 - date and time when TSL update finished\n  successfully otherwise  NULL  if not yet finished or failed with error  updateMessage\u00a0 - More detailed explanation why Service status is\n  i.e WARNING  tslCertificateInfo  - collection of all the countries TSLs that\n  have been loaded into PDF Validator  loadingDiagnosticInfo  - Additonal information when loading or\n  validating the TSL failed or loading time if no error was not\n  encountered  signerCertificateValidUntil  - TSL signing certificate expiration\n  date  tslValidUntil  - TSL expiration date   Explanation\u00a0of TSL update Service status values:   OK \u00a0- TSL certificate list has successfully completed update all\n  is working correctly  WARNING \u00a0- TSL update has not yet started or is currently in\n  progress  CRITICAL \u00a0- TSL update status information could not be queried\n  from PDF Validator Service", 
            "title": "TSL update status report"
        }, 
        {
            "location": "/testing/", 
            "text": "iAutomation testing\n\n\nFramework\n\n\nValidation Service Automation tests are using Rest-assured library. REST\nAssured is a Java DSL(Domain-specific language) for simplifying testing\nof REST based Services built on top of HTTP Builder. It supports \nPOST\n,\n\nGET\n, \nPUT\n, \nDELETE\n, \nOPTIONS\n, \nPATCH\n and \nHEAD\n requests and can be used to\nvalidate and verify the response of these requests.\n\n\nSoftware requirements\n\n\n\n\nIn order to run the tests there is needed an integrated development\n  environment i.e. \nIntelliJ IDEA\n or \nEclipse\n.\n\n\nApache Maven\n latest version\n\n\nUsing \nJava 8\n\n\n\n\nStarting and configuring tests\n\n\nImport Project\n\n\nBefore You can start You have to import the test project into the IDEA.\n\n\n\n\nOpen IntelliJ\n\n\nFile --\n Import Project\n\n\nChooce pdfValitator --\n pdf-validator-test --\n pom.xml\n\n\nNext --\n Next --\n Next\n\n\nSelect project SDK 1.8\n\n\nJDK home path = \\${JAVA_HOME}\n\n\nClick the buttons \"Next\", \"Finish\" and \"This Window\".\n\n\n\n\nConfiguration\n\n\nYou have to configure The URL to Your web Service endpoint in order to\nrun the tests. The configuration file file is located\nat\u00a0\npdf-validator-test/src/test/main/config/tests.properties\n\n\ntest.properties\n\n\nService\\_url=http://localhost:8080/pdf-validator-webapp/wService/validationService\n\n\n\n\nExecuting\n\n\nRun tests in the IntelliJ IDEA:\n\n\n\n\nAll test cases are located in java classes in\n  the\u00a0\npdf-validator-test/src/test/java/ee.sk.pdfvalidatortest/\n\u00a0package.\n\n\nIn order to execute all tests,\u00a0you can right click the imported Java\n  module (for example, \npdf-validator-test\n) and select\u00a0\nRun 'All Tests'\n.\n\n\nIn order to execute all tests in a Java file, you can right click that\n  file, for example\u00a0\nBaselineProfileTests.java\n\u00a0and select\u00a0\nRun\n  'BaselineProfileTest'\n\n\n\n\nIn order to execute a single test, you can right click\nthe\u00a0\n@Test\n\u00a0annotation in the java code editor and select\u00a0\nRun\n'testName'\n\n\nRun tests from the command line:\n\n\n\n\nOpen command line tools (i.e cmd, iTerm) \n\n\nNavigate to\u00a0\nPROJECT_ROOT/pdf-validator-parent/pdf-valdidator-test/\n\n\n\n\nTo run all tests\n\n\nmvn test\n\n\n\n\nTo run single class:\n\n\nmvn -Dtest=\\[class\\] test\n\n\n\n\nTo run single method:\n\n\nmvn -Dtest=\\[class\\]\\#\\[method\\] test\n\n\n\n\nTest structure\n\n\nAll testcases are in the\n\npdf-validator-test/src/test/java/ee.sk.pdfvalidatortest/ package.\n\n\nThere are two helper classes \nXmlUtil.java\n and\n\nPdfValidatorSoapTests.java\n\u00a0 that are used in various test cases.\n\n\n\n\nXmlUtil\n class is for xpath rules and xml validation.\u00a0\n\n\nPdfValidatorSoapTests\n is for reading and parsing file.\u00a0\n\n\n\n\nAt the time of this writing, the tests are categorized into the\nfollowing five groups (five java classes):\n\n\n\n\nBaselineProfileTests\n - contains tests with different baseline\n  profiles i.e \nB\n, \nT\n, \nLT\n, \nLTA\n\n\nDocumentFormatTests\n - contains tests with files in different\n  formats, i.e \nasice\n, \nddoc\n, \nzip\n\n\nSignatureCryptographicAlgorithmTests\n - contains tests with\n  different cryptographic algorithms, i.e \nSHA1\n, \nSHA256\n, \nRSA1024\n etc.\n\n\nSignatureRevocationValueTests\n - contains tests with different\n  OCSP response edge cases\n\n\nSigningCertificateTests\n - contains tests with different signing\n  certificate manipulations\n\n\n\n\nPdfValidatorSoapTests\n\u00a0class reads test files\nform\u00a0\npdf-validator-test/src/test/java/resources/\n. If You want to add\nnew tests files, You can do it by just drag and drop through IntelliJ\nand creating a new testcase for that file.\n\n\nExample\n\n\n@Test\npublic void validSignaturesRemainValidAfterSigningCertificateExpires() {\n    String httpBody = post(validationRequestFor(readFile(\nhellopades-lt-sha256-rsa1024-not-expired.pdf\n)))\n        .andReturn().body().asString();\n\n    assertEquals(1, validSignatures(simpleReport(httpBody)));\n}\n\n\n\n\nThe above test is verifying the result of validating a pdf file which\nhas been signed with a certificate that has expired after signing.\n\n\nDescription of Test Cases and Test Data\n\n\n\n\nThe PDF-file is signed with Certificate that does does not have the \n   \"nonRepudation\" bit set (PAdES Baseline LT)\n\n\nNFR-ID:\n \n\n\nDSS-CRT-NONREPU\n\n\n\n\n\n\nFILES:\n \n\n\nhellopades-pades-lt-sha256-auth.pdf\n\n\n\n\n\n\n\n\n\n\nThe PDF-file has got signatures of two different profiles - PAdES Baseline-B and PAdES-LTA\n\n\n\"\"FILE:\"\" \n\n\nhellopades-sigb-signed.pdf\n\n\n\n\n\n\n\n\n\n\nThe PDF has PAdES-LT profile signature, but no OCSP confirmation\n\n\nNFR-ID:\n \n\n\nDSS-SIG-NO-OCSP\n\n\n\n\n\n\nFILES:\n \n\n\nhellopades-lta-no-ocsp.pdf\n\n\n\n\n\n\n\n\n\n\nThe PDF-file has PAdES-LT profile signature and an OCSP confirmation that is more than 15 minutes later than the signature\u2019s Time Stamp.\n\n\nNFR-ID:\n \n\n\nDSS-SIG-OCSP-TS-WARN\n\n\n\n\n\n\nFILES:\n \n\n\nhellopades-lt-sha256-ocsp-15min.pdf\n\n\n\n\n\n\n\n\n\n\nThe PDF-file has PAdES-LT profile signature and an OCSP confirmation more than 24 hours later than the signature\u2019s Time Stamp.\n\n\nNFR-ID:\n \n\n\nDSS-SIG-OCSP-TS-ERROR\n\n\n\n\n\n\nFILES:\n \n\n\nhellopades-lt-sha256-ocsp-25h.pdf\n\n\n\n\n\n\n\n\n\n\nThe PDF-file has been signed with PAdES Baseline LT profile signature, signer\u2019s certificate has been revoked.\n\n\nFILES:\n \n\n\nhellopades-lt-sha256-revoked.pdf\n\n\n\n\n\n\n\n\n\n\nThe PDF-file has been signed with PAdES Baseline LTA profile signature, the signature contains CRL.\n\n\nFILES:\n \n\n\nhellopades-lta-no-ocsp.pdf\n\n\n\n\n\n\n\n\n\n\nThe PDF-file has been signed with PadES-LT profile signature, file has corrupt Time Stamp. \n\n\nFILES:\n \n\n\nhellopades-lt-sha256-rsa1024-invalid-ts.pdf - (test)\n\n\n\n\n\n\n\n\n\n\nThe PDF-file has been signed with certificate that will expire in 7 days after signing (PAdES Baseline LT)\n\n\nFILES:\n \n\n\nhellopades-lt-sha256-rsa2048-7d.pdf\n\n\nhellopades-lt-sha256-rsa1024-no-expired.pdf\n\n\n\n\n\n\n\n\n\n\nSHA1, SHA256, RSA1024, RSA2048, ECDSA224, ECDSA 256 algorithms (PAdES Baseline LT)\n\n\nNFR-ID:\n \n\n\nDSS-CRY-ALGOEXP\n\n\n\n\n\n\nFILES:\n\n\nhellopades-lt-sha512.pdf\n\n\nhellopades-lt-sha1.pdf\n\n\nhellopades-lt-sha256-ec256.pdf -(test) \n\n\nhellopades-lt-sha256-ec224.pdf - (test) \n\n\nhellopades-lt-sha256-rsa1024.pdf - (test) \n\n\nhellopades-lt-sha256-rsa2048.pdf\n\n\n\n\n\n\n\n\n\n\nEncryption Algorithm RSA with 1023-bit keys (PAdES Baseline LT)\u00a0\n\n\nFILES:\n\n\nhellopades-lt-sha256-rsa1023.pdf\n\n\n\n\n\n\n\n\n\n\nEncryption Algorithm RSA with 2047-bit keys (PAdES Baseline LT)\n\n\nFILES:\n\n\nhellopades-lt-sha256-rsa2047.pdf\n\n\n\n\n\n\n\n\n\n\nhellopadess been signed with an expired certificate, where signing time is within the original validity period of the \n   certificate, but OCSP confirmation and Time Stamp are current date (PAdES Baseline LT).\u00a0\n\n\nFILES:\n\n\nhellopades-lt-sha256-rsa1024-expired1.pdf\n\n\nhellopades-lt-sha1-rsa1024-expired2.pdf\n\n\nhellopades-lt-sha256-rsa1024-expired2.pdf\n\n\nhellopades-lt-sha256-rsa2048-expired.pdf\u00a0\n\n\n\n\n\n\n\n\n\n\nPDF-file\u2019s signature has OCSP confirmation before Time Stamp \n\n\nFILES:\n\n\nhellopades-lt-sha256-rsa2048-ocsp-before-ts.pdf\n\n\n\n\n\n\n\n\n\n\nPDF file with a serial signature\n\n\nNFR-ID:\n \n\n\nDSS-SIG-MULTISIG\n\n\n\n\n\n\nFILES:\n\n\nhellopades-lt1-lt2-Serial.pdf\n\n\n\n\n\n\n\n\n\n\nPDF file with a parallel signature\n\n\nNFR-ID:\n \n\n\nDSS-SIG-MULTISIG\n\n\n\n\n\n\nFILES:\n\n\nhellopades-lt1-lt2-parallel.pdf (OOTEL)\n\n\n\n\n\n\n\n\n\n\nPDF file without a timestamp\n\n\nNFR-ID:\n \n\n\nDSS-SIG-TIMESTAMP\n\n\n\n\n\n\nFILES:\n\n\nhellopades-lt-sha256-rsa2048-no-ts.pdf\n\n\n\n\n\n\n\n\n\n\nPDF file where signature timestamp is after certificate expiry date.\n\n\nNFR-ID:\n \n\n\nDSS-SIG-VALID_CERTS\n\n\n\n\n\n\nFILES:\n\n\nhellopades-lt-sha256-rsa2048-expired.pdf\n\n\n\n\n\n\n\n\n\n\nPDF file signed with 223 bit ECDSA key (PAdES Baseline LT)\n\n\nNFR-ID:\n \n\n\nDSS-CRY-ECDSAKEY\n\n\n\n\n\n\nFILES:\n\n\nNo test file.\n\n\n\n\n\n\n\n\n\n\nLarger signed PDF files (PAdES Baseline LT).\n\n\nFILES:\n\n\nhellopades-lta-no-ocsp.pdf\n\n\nscout_x4-manual-signed_lt_9mb.pdf\n\n\nscout_x4-manual-signed_lta_9mb.pdf\n\n\ndigidocservice-signed_lt_1-2mb.pdf\n\n\ndigidocservice-signed_lta_1-2mb.pdf\n\n\negovernment-benchmark_lt_3-8mb.pdf\n\n\negovernment-benchmark_lta_3-8mb.pdf\n\n\n\n\n\n\n\n\n\n\nMessage-digest attribute value does not match calculated value\n\n\nFILES:\n\n\nhellopades-lt1-lt2-parallel3.pdf", 
            "title": "Automation testing"
        }, 
        {
            "location": "/testing/#iautomation-testing", 
            "text": "", 
            "title": "iAutomation testing"
        }, 
        {
            "location": "/testing/#framework", 
            "text": "Validation Service Automation tests are using Rest-assured library. REST\nAssured is a Java DSL(Domain-specific language) for simplifying testing\nof REST based Services built on top of HTTP Builder. It supports  POST , GET ,  PUT ,  DELETE ,  OPTIONS ,  PATCH  and  HEAD  requests and can be used to\nvalidate and verify the response of these requests.", 
            "title": "Framework"
        }, 
        {
            "location": "/testing/#software-requirements", 
            "text": "In order to run the tests there is needed an integrated development\n  environment i.e.  IntelliJ IDEA  or  Eclipse .  Apache Maven  latest version  Using  Java 8", 
            "title": "Software requirements"
        }, 
        {
            "location": "/testing/#starting-and-configuring-tests", 
            "text": "Import Project  Before You can start You have to import the test project into the IDEA.   Open IntelliJ  File --  Import Project  Chooce pdfValitator --  pdf-validator-test --  pom.xml  Next --  Next --  Next  Select project SDK 1.8  JDK home path = \\${JAVA_HOME}  Click the buttons \"Next\", \"Finish\" and \"This Window\".   Configuration  You have to configure The URL to Your web Service endpoint in order to\nrun the tests. The configuration file file is located\nat\u00a0 pdf-validator-test/src/test/main/config/tests.properties  test.properties  Service\\_url=http://localhost:8080/pdf-validator-webapp/wService/validationService  Executing  Run tests in the IntelliJ IDEA:   All test cases are located in java classes in\n  the\u00a0 pdf-validator-test/src/test/java/ee.sk.pdfvalidatortest/ \u00a0package.  In order to execute all tests,\u00a0you can right click the imported Java\n  module (for example,  pdf-validator-test ) and select\u00a0 Run 'All Tests' .  In order to execute all tests in a Java file, you can right click that\n  file, for example\u00a0 BaselineProfileTests.java \u00a0and select\u00a0 Run\n  'BaselineProfileTest'   In order to execute a single test, you can right click\nthe\u00a0 @Test \u00a0annotation in the java code editor and select\u00a0 Run\n'testName'  Run tests from the command line:   Open command line tools (i.e cmd, iTerm)   Navigate to\u00a0 PROJECT_ROOT/pdf-validator-parent/pdf-valdidator-test/   To run all tests  mvn test  To run single class:  mvn -Dtest=\\[class\\] test  To run single method:  mvn -Dtest=\\[class\\]\\#\\[method\\] test  Test structure  All testcases are in the pdf-validator-test/src/test/java/ee.sk.pdfvalidatortest/ package.  There are two helper classes  XmlUtil.java  and PdfValidatorSoapTests.java \u00a0 that are used in various test cases.   XmlUtil  class is for xpath rules and xml validation.\u00a0  PdfValidatorSoapTests  is for reading and parsing file.\u00a0   At the time of this writing, the tests are categorized into the\nfollowing five groups (five java classes):   BaselineProfileTests  - contains tests with different baseline\n  profiles i.e  B ,  T ,  LT ,  LTA  DocumentFormatTests  - contains tests with files in different\n  formats, i.e  asice ,  ddoc ,  zip  SignatureCryptographicAlgorithmTests  - contains tests with\n  different cryptographic algorithms, i.e  SHA1 ,  SHA256 ,  RSA1024  etc.  SignatureRevocationValueTests  - contains tests with different\n  OCSP response edge cases  SigningCertificateTests  - contains tests with different signing\n  certificate manipulations   PdfValidatorSoapTests \u00a0class reads test files\nform\u00a0 pdf-validator-test/src/test/java/resources/ . If You want to add\nnew tests files, You can do it by just drag and drop through IntelliJ\nand creating a new testcase for that file.  Example  @Test\npublic void validSignaturesRemainValidAfterSigningCertificateExpires() {\n    String httpBody = post(validationRequestFor(readFile( hellopades-lt-sha256-rsa1024-not-expired.pdf )))\n        .andReturn().body().asString();\n\n    assertEquals(1, validSignatures(simpleReport(httpBody)));\n}  The above test is verifying the result of validating a pdf file which\nhas been signed with a certificate that has expired after signing.", 
            "title": "Starting and configuring tests"
        }, 
        {
            "location": "/testing/#description-of-test-cases-and-test-data", 
            "text": "The PDF-file is signed with Certificate that does does not have the \n   \"nonRepudation\" bit set (PAdES Baseline LT)  NFR-ID:    DSS-CRT-NONREPU    FILES:    hellopades-pades-lt-sha256-auth.pdf      The PDF-file has got signatures of two different profiles - PAdES Baseline-B and PAdES-LTA  \"\"FILE:\"\"   hellopades-sigb-signed.pdf      The PDF has PAdES-LT profile signature, but no OCSP confirmation  NFR-ID:    DSS-SIG-NO-OCSP    FILES:    hellopades-lta-no-ocsp.pdf      The PDF-file has PAdES-LT profile signature and an OCSP confirmation that is more than 15 minutes later than the signature\u2019s Time Stamp.  NFR-ID:    DSS-SIG-OCSP-TS-WARN    FILES:    hellopades-lt-sha256-ocsp-15min.pdf      The PDF-file has PAdES-LT profile signature and an OCSP confirmation more than 24 hours later than the signature\u2019s Time Stamp.  NFR-ID:    DSS-SIG-OCSP-TS-ERROR    FILES:    hellopades-lt-sha256-ocsp-25h.pdf      The PDF-file has been signed with PAdES Baseline LT profile signature, signer\u2019s certificate has been revoked.  FILES:    hellopades-lt-sha256-revoked.pdf      The PDF-file has been signed with PAdES Baseline LTA profile signature, the signature contains CRL.  FILES:    hellopades-lta-no-ocsp.pdf      The PDF-file has been signed with PadES-LT profile signature, file has corrupt Time Stamp.   FILES:    hellopades-lt-sha256-rsa1024-invalid-ts.pdf - (test)      The PDF-file has been signed with certificate that will expire in 7 days after signing (PAdES Baseline LT)  FILES:    hellopades-lt-sha256-rsa2048-7d.pdf  hellopades-lt-sha256-rsa1024-no-expired.pdf      SHA1, SHA256, RSA1024, RSA2048, ECDSA224, ECDSA 256 algorithms (PAdES Baseline LT)  NFR-ID:    DSS-CRY-ALGOEXP    FILES:  hellopades-lt-sha512.pdf  hellopades-lt-sha1.pdf  hellopades-lt-sha256-ec256.pdf -(test)   hellopades-lt-sha256-ec224.pdf - (test)   hellopades-lt-sha256-rsa1024.pdf - (test)   hellopades-lt-sha256-rsa2048.pdf      Encryption Algorithm RSA with 1023-bit keys (PAdES Baseline LT)\u00a0  FILES:  hellopades-lt-sha256-rsa1023.pdf      Encryption Algorithm RSA with 2047-bit keys (PAdES Baseline LT)  FILES:  hellopades-lt-sha256-rsa2047.pdf      hellopadess been signed with an expired certificate, where signing time is within the original validity period of the \n   certificate, but OCSP confirmation and Time Stamp are current date (PAdES Baseline LT).\u00a0  FILES:  hellopades-lt-sha256-rsa1024-expired1.pdf  hellopades-lt-sha1-rsa1024-expired2.pdf  hellopades-lt-sha256-rsa1024-expired2.pdf  hellopades-lt-sha256-rsa2048-expired.pdf\u00a0      PDF-file\u2019s signature has OCSP confirmation before Time Stamp   FILES:  hellopades-lt-sha256-rsa2048-ocsp-before-ts.pdf      PDF file with a serial signature  NFR-ID:    DSS-SIG-MULTISIG    FILES:  hellopades-lt1-lt2-Serial.pdf      PDF file with a parallel signature  NFR-ID:    DSS-SIG-MULTISIG    FILES:  hellopades-lt1-lt2-parallel.pdf (OOTEL)      PDF file without a timestamp  NFR-ID:    DSS-SIG-TIMESTAMP    FILES:  hellopades-lt-sha256-rsa2048-no-ts.pdf      PDF file where signature timestamp is after certificate expiry date.  NFR-ID:    DSS-SIG-VALID_CERTS    FILES:  hellopades-lt-sha256-rsa2048-expired.pdf      PDF file signed with 223 bit ECDSA key (PAdES Baseline LT)  NFR-ID:    DSS-CRY-ECDSAKEY    FILES:  No test file.      Larger signed PDF files (PAdES Baseline LT).  FILES:  hellopades-lta-no-ocsp.pdf  scout_x4-manual-signed_lt_9mb.pdf  scout_x4-manual-signed_lta_9mb.pdf  digidocservice-signed_lt_1-2mb.pdf  digidocservice-signed_lta_1-2mb.pdf  egovernment-benchmark_lt_3-8mb.pdf  egovernment-benchmark_lta_3-8mb.pdf      Message-digest attribute value does not match calculated value  FILES:  hellopades-lt1-lt2-parallel3.pdf", 
            "title": "Description of Test Cases and Test Data"
        }, 
        {
            "location": "/issues/", 
            "text": "Known Issues\n\n\n\n\n\n\nAfter starting up the server, users need to wait for approximately\n    two minutes before issuing requests to the server. (Otherwise, the\n    requests may fail to validate.) To know how long to wait, look at\n    the\u00a0application output log and wait until it contains the following\n    line:\u00a0\"--\n run(): END LOADING\".\\\n    \nTechnical details: the TSL loading code has a known issue that has\n    been reported to the developers of a library used by the current\n    project:\n    see\u00a0\nhttps://esig-dss.atlassian.net/browse/DSS-732\n.\n    Before the said TSL loading starts, the following will be printed\n    into the log:\u00a0\"--\n run(): START LOADING\"; later, when the loading\n    finishes, it will print\u00a0\"--\n run(): END LOADING\", after which it\n    will be ok to issue requsts to the server.\n\n\n\n\n\n\nSignatures may fail to validate at 3:00 AM at night, for up to few\n    minutes.\\\n    \nTechnical details: TSL reloading has a similar issue as TSL loading\n    during startup: during the start of reload\u00a0the code discards\n    existing certificates cache, which may result in validation failures\n    when the corresponding CA certificates are not yet reloaded. Current\n    workaround is that the reload process gets triggered only once per\n    day, during low traffic hours: every day at night, at 3:00 AM.\n    Reported\n    issue:\u00a0\nhttps://esig-dss.atlassian.net/browse/DSS-740\n.\n\n\n\n\n\n\nSignature validation may take over 3 seconds of time.\\\n    \nTechnical details: on one test machine, a\u00a02MB PDF file validation\n    first request processing duration (after server startup) is about\n    \\~4,8 sec and following requests \\~3 sec, for 90 KB file the\n    validation duration statistics are practically the same.\u00a0Reported\n    issue:\u00a0\nhttps://esig-dss.atlassian.net/browse/DSS-742\n.\n\n\n\n\n\n\nTSL loading connection timeout is 60 seconds.\u00a0When a TSL server of a\n    member state is not responding, it may take a long time to reach\n    connection timeout (60 seconds). This issue is reported to DSS\n    developers at:\u00a0\nhttps://esig-dss.atlassian.net/browse/DSS-720\n.\n\n\n\n\n\n\nNo warnings are shown for signatures made with SHA-1. This has been\n    reported to DSS developers\n    at: https://esig-dss.atlassian.net/browse/DSS-760.", 
            "title": "Known Issues"
        }, 
        {
            "location": "/issues/#known-issues", 
            "text": "After starting up the server, users need to wait for approximately\n    two minutes before issuing requests to the server. (Otherwise, the\n    requests may fail to validate.) To know how long to wait, look at\n    the\u00a0application output log and wait until it contains the following\n    line:\u00a0\"--  run(): END LOADING\".\\\n     Technical details: the TSL loading code has a known issue that has\n    been reported to the developers of a library used by the current\n    project:\n    see\u00a0 https://esig-dss.atlassian.net/browse/DSS-732 .\n    Before the said TSL loading starts, the following will be printed\n    into the log:\u00a0\"--  run(): START LOADING\"; later, when the loading\n    finishes, it will print\u00a0\"--  run(): END LOADING\", after which it\n    will be ok to issue requsts to the server.    Signatures may fail to validate at 3:00 AM at night, for up to few\n    minutes.\\\n     Technical details: TSL reloading has a similar issue as TSL loading\n    during startup: during the start of reload\u00a0the code discards\n    existing certificates cache, which may result in validation failures\n    when the corresponding CA certificates are not yet reloaded. Current\n    workaround is that the reload process gets triggered only once per\n    day, during low traffic hours: every day at night, at 3:00 AM.\n    Reported\n    issue:\u00a0 https://esig-dss.atlassian.net/browse/DSS-740 .    Signature validation may take over 3 seconds of time.\\\n     Technical details: on one test machine, a\u00a02MB PDF file validation\n    first request processing duration (after server startup) is about\n    \\~4,8 sec and following requests \\~3 sec, for 90 KB file the\n    validation duration statistics are practically the same.\u00a0Reported\n    issue:\u00a0 https://esig-dss.atlassian.net/browse/DSS-742 .    TSL loading connection timeout is 60 seconds.\u00a0When a TSL server of a\n    member state is not responding, it may take a long time to reach\n    connection timeout (60 seconds). This issue is reported to DSS\n    developers at:\u00a0 https://esig-dss.atlassian.net/browse/DSS-720 .    No warnings are shown for signatures made with SHA-1. This has been\n    reported to DSS developers\n    at: https://esig-dss.atlassian.net/browse/DSS-760.", 
            "title": "Known Issues"
        }, 
        {
            "location": "/appendix/", 
            "text": "", 
            "title": "Appendixes"
        }
    ]
}